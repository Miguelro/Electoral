escanos_prov<-rowSums(datos_MIR_escanos)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
presentado<-datos_MIR_Votos>0
# Calculo lo escaños de la provincias donde se presentan
n<-ncol(datos_MIR_escanos)
esca_presentado<-rep(NA,n)
for(i in 1:n){
esca_presentado[i]<-sum(presentado[,i]*escanos_prov)
}
esca_presentado<-esca_presentado/n_escanos
re<-list()
re[[1]]<-sum(esca_presentado*totales_por)
re[[2]]<-as.numeric(totales_por)
re[[3]]<-as.numeric(esca_presentado)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
#re$Porcentaje_votos
#re$Porcentaje_escanos
return(re)
}#Fin del TRUE
else{
if(missing(d_votos)) stop("Debe facilitarse un data.frame con los datos de votos")
if(missing(d_escanos)) stop("Debe facilitarse un data.frame con los datos de esca\u00F1s")
if(class(d_votos) != "data.frame") stop("El par\u00E1metro 'd_votos' debe ser un data.frame")
if(class(d_escanos) != "data.frame") stop("El par\u00E1metro 'd_escanos' debe ser un data.frame")
# compruebo que el numero de filas es el mismo
if(nrow(d_votos) != nrow(d_escanos)) stop("Deben coincider el n\u00FA de filas de los
dos data.frame")
#Comparo que los nombres de las regiones son los mismo
b <- as.character(d_votos[,1]) == as.character(d_escanos[,1])
if(sum(b) != nrow(d_votos)) stop("Los nombres de las regiones ('primera columa') deben
ser iguales en los dos data.frame")
#Calculo los totales de los votos
totales <- colSums(d_votos[,-c(1)])
#Tantos por uno a nivel nacional
totales_por <- totales/sum(totales)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
presentado<-d_votos[,-c(1)]>0
# Entresaco los escaños de cada provincia
# Me quedo solo con la columna de los escaños
escanos_prov <- d_escanos[,2]
n <- ncol(d_votos[,-c(1)])
esca_presentado <- rep(NA,n)
for(i in 1:n){
esca_presentado[i] <- sum(presentado[,i]*escanos_prov)
}
#Calculo el total de escaños
n_escanos <- sum(escanos_prov)
esca_presentado_por <- esca_presentado/n_escanos
# Los datos los saco en la siguiente lista
re <-list()
re[[1]] <- sum(esca_presentado_por*totales_por)
re[[2]] <- as.numeric(totales_por)
re[[3]] <- as.numeric(esca_presentado_por)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
return(re)
}#Fin del else
}
da1 <- data.frame( # Contiene los votos
Reg=c("Alava","Albacete","Madrid","Barcelona","Valladolid"),
PSOE=c(400,300,0,50,25),
PP=c(300,200,10,150,2),
Cs=c(400,0,3,300,45),
Uno=c(465,23,341,263,0))
da2 <- data.frame( # Contiene los escaños totales de cada provincia
Reg=c("Alava","Albacete","Madrid","Barcelona","Valladolid"),
escanos=c(2,3,6,5,4))
IN_LAGO_MONTERO(Auto = FALSE,d_votos = da1,d_escanos = da2)
library(Relectoral)
library(Relectoral)
if (!require("Relectoral")) install.packages("Relectoral"); require("Relectoral")
IN_LAGO_MONTERO<-function(Ano,Mes,Ruta,n_escanos=350,Auto=TRUE,d_votos,d_escanos){
if(Auto == TRUE){
if( class(Mes) != "character") stop( " El mes debe ser de tipo car\u00E1cter")
if(nchar(Mes) != 2) stop("El mes debe contener dos caracteres")
if(is.null(Ruta)) stop("Se debe facilitar alg\u00FAn valor para 'Ruta'")
# Indice de nacionalización de Lago y Montero
datos_MIR<-Agregado_Prov_MIR(Ano,Mes,"Congreso",Ruta,Borrar=T)
datos_MIR<-datos_MIR[1:52,]
#Me quedo con la columna de los votos
# Mediante expresión regular selecciono las columnas que tienen el número de votos
columnas_Votos<-grep("V_",colnames(datos_MIR))
# Me quedo solo con las columna de votos
datos_MIR_Votos<-as.data.frame(datos_MIR[,columnas_Votos])
# Transformo los datos a numéricos
datos_MIR_Votos <- as.data.frame(apply(datos_MIR_Votos,2,as.integer))
#calculo los totales
totales<-colSums(datos_MIR_Votos)
#Tantos por uno
totales_por<-totales/sum(totales)
#Calculo para cada provincia los escaños que tiene
# Mediante expresión regular selecciono las columnas que tienen el número de escanos
columnas_escanos<-grep("D_",colnames(datos_MIR))
#extraigo las columnas con datos de escaños
datos_MIR_escanos <- as.data.frame(datos_MIR[,columnas_escanos])
#transformo los datos a numericos
datos_MIR_escanos <- as.data.frame(apply(datos_MIR_escanos,2,as.integer))
#Ahora saco los escaños que tiene cada provncia
escanos_prov<-rowSums(datos_MIR_escanos)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
presentado<-datos_MIR_Votos>0
# Calculo lo escaños de la provincias donde se presentan
n<-ncol(datos_MIR_escanos)
esca_presentado<-rep(NA,n)
for(i in 1:n){
esca_presentado[i]<-sum(presentado[,i]*escanos_prov)
}
esca_presentado<-esca_presentado/n_escanos
re<-list()
re[[1]]<-sum(esca_presentado*totales_por)
re[[2]]<-as.numeric(totales_por)
re[[3]]<-as.numeric(esca_presentado)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
#re$Porcentaje_votos
#re$Porcentaje_escanos
return(re)
}#Fin del TRUE
else{
if(missing(d_votos)) stop("Debe facilitarse un data.frame con los datos de votos")
if(missing(d_escanos)) stop("Debe facilitarse un data.frame con los datos de esca\u00F1s")
if(class(d_votos) != "data.frame") stop("El par\u00E1metro 'd_votos' debe ser un data.frame")
if(class(d_escanos) != "data.frame") stop("El par\u00E1metro 'd_escanos' debe ser un data.frame")
# compruebo que el numero de filas es el mismo
if(nrow(d_votos) != nrow(d_escanos)) stop("Deben coincider el n\u00FA de filas de los
dos data.frame")
#Comparo que los nombres de las regiones son los mismo
b <- as.character(d_votos[,1]) == as.character(d_escanos[,1])
if(sum(b) != nrow(d_votos)) stop("Los nombres de las regiones ('primera columa') deben
ser iguales en los dos data.frame")
#Calculo los totales de los votos
totales <- colSums(d_votos[,-c(1)])
#Tantos por uno a nivel nacional
totales_por <- totales/sum(totales)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
browse()
presentado<-d_votos[,-c(1)]>0
# Entresaco los escaños de cada provincia
# Me quedo solo con la columna de los escaños
escanos_prov <- d_escanos[,2]
n <- ncol(d_votos[,-c(1)])
esca_presentado <- rep(NA,n)
for(i in 1:n){
esca_presentado[i] <- sum(presentado[,i]*escanos_prov)
}
#Calculo el total de escaños
n_escanos <- sum(escanos_prov)
esca_presentado_por <- esca_presentado/n_escanos
# Los datos los saco en la siguiente lista
re <-list()
re[[1]] <- sum(esca_presentado_por*totales_por)
re[[2]] <- as.numeric(totales_por)
re[[3]] <- as.numeric(esca_presentado_por)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
return(re)
}#Fin del else
}
s<-IN_LAGO_MONTERO(2019,"11","D:/",n_escanos = 350)
s[[1]]
s3 <- IN_LAGO_MONTERO(2019,"04","D:/",n_escanos = 350)
s3[[1]]
da1 <- data.frame( # Contiene los votos
Reg=c("Alava","Albacete","Madrid","Barcelona","Valladolid"),
PSOE=c(400,300,0,50,25),
PP=c(300,200,10,150,2),
Cs=c(400,0,3,300,45),
Uno=c(465,23,341,263,0))
da2 <- data.frame( # Contiene los escaños totales de cada provincia
Reg=c("Alava","Albacete","Madrid","Barcelona","Valladolid"),
escanos=c(2,3,6,5,4))
da1
d2
da2 <- data.frame( # Contiene los escaños totales de cada provincia
Reg=c("Alava","Albacete","Madrid","Barcelona","Valladolid"),
escanos=c(2,3,6,5,4))
d2
da2
IN_LAGO_MONTERO<-function(Ano,Mes,Ruta,n_escanos=350,Auto=TRUE,d_votos,d_escanos){
if(Auto == TRUE){
if( class(Mes) != "character") stop( " El mes debe ser de tipo car\u00E1cter")
if(nchar(Mes) != 2) stop("El mes debe contener dos caracteres")
if(is.null(Ruta)) stop("Se debe facilitar alg\u00FAn valor para 'Ruta'")
# Indice de nacionalización de Lago y Montero
datos_MIR<-Agregado_Prov_MIR(Ano,Mes,"Congreso",Ruta,Borrar=T)
datos_MIR<-datos_MIR[1:52,]
#Me quedo con la columna de los votos
# Mediante expresión regular selecciono las columnas que tienen el número de votos
columnas_Votos<-grep("V_",colnames(datos_MIR))
# Me quedo solo con las columna de votos
datos_MIR_Votos<-as.data.frame(datos_MIR[,columnas_Votos])
# Transformo los datos a numéricos
datos_MIR_Votos <- as.data.frame(apply(datos_MIR_Votos,2,as.integer))
#calculo los totales
totales<-colSums(datos_MIR_Votos)
#Tantos por uno
totales_por<-totales/sum(totales)
#Calculo para cada provincia los escaños que tiene
# Mediante expresión regular selecciono las columnas que tienen el número de escanos
columnas_escanos<-grep("D_",colnames(datos_MIR))
#extraigo las columnas con datos de escaños
datos_MIR_escanos <- as.data.frame(datos_MIR[,columnas_escanos])
#transformo los datos a numericos
datos_MIR_escanos <- as.data.frame(apply(datos_MIR_escanos,2,as.integer))
#Ahora saco los escaños que tiene cada provncia
escanos_prov<-rowSums(datos_MIR_escanos)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
presentado<-datos_MIR_Votos>0
# Calculo lo escaños de la provincias donde se presentan
n<-ncol(datos_MIR_escanos)
esca_presentado<-rep(NA,n)
for(i in 1:n){
esca_presentado[i]<-sum(presentado[,i]*escanos_prov)
}
esca_presentado<-esca_presentado/n_escanos
re<-list()
re[[1]]<-sum(esca_presentado*totales_por)
re[[2]]<-as.numeric(totales_por)
re[[3]]<-as.numeric(esca_presentado)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
#re$Porcentaje_votos
#re$Porcentaje_escanos
return(re)
}#Fin del TRUE
else{
if(missing(d_votos)) stop("Debe facilitarse un data.frame con los datos de votos")
if(missing(d_escanos)) stop("Debe facilitarse un data.frame con los datos de esca\u00F1s")
if(class(d_votos) != "data.frame") stop("El par\u00E1metro 'd_votos' debe ser un data.frame")
if(class(d_escanos) != "data.frame") stop("El par\u00E1metro 'd_escanos' debe ser un data.frame")
# compruebo que el numero de filas es el mismo
if(nrow(d_votos) != nrow(d_escanos)) stop("Deben coincider el n\u00FA de filas de los
dos data.frame")
#Comparo que los nombres de las regiones son los mismo
b <- as.character(d_votos[,1]) == as.character(d_escanos[,1])
if(sum(b) != nrow(d_votos)) stop("Los nombres de las regiones ('primera columa') deben
ser iguales en los dos data.frame")
#Calculo los totales de los votos
totales <- colSums(d_votos[,-c(1)])
#Tantos por uno a nivel nacional
totales_por <- totales/sum(totales)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
browse()
presentado<-d_votos[,-c(1)]>0
# Entresaco los escaños de cada provincia
# Me quedo solo con la columna de los escaños
escanos_prov <- d_escanos[,2]
n <- ncol(d_votos[,-c(1)])
esca_presentado <- rep(NA,n)
for(i in 1:n){
esca_presentado[i] <- sum(presentado[,i]*escanos_prov)
}
#Calculo el total de escaños
n_escanos <- sum(escanos_prov)
esca_presentado_por <- esca_presentado/n_escanos
# Los datos los saco en la siguiente lista
re <-list()
re[[1]] <- sum(esca_presentado_por*totales_por)
re[[2]] <- as.numeric(totales_por)
re[[3]] <- as.numeric(esca_presentado_por)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
return(re)
}#Fin del else
}
IN_LAGO_MONTERO(Auto = FALSE,d_votos = da1,d_escanos = da2)
IN_LAGO_MONTERO<-function(Ano,Mes,Ruta,n_escanos=350,Auto=TRUE,d_votos,d_escanos){
if(Auto == TRUE){
if( class(Mes) != "character") stop( " El mes debe ser de tipo car\u00E1cter")
if(nchar(Mes) != 2) stop("El mes debe contener dos caracteres")
if(is.null(Ruta)) stop("Se debe facilitar alg\u00FAn valor para 'Ruta'")
# Indice de nacionalización de Lago y Montero
datos_MIR<-Agregado_Prov_MIR(Ano,Mes,"Congreso",Ruta,Borrar=T)
datos_MIR<-datos_MIR[1:52,]
#Me quedo con la columna de los votos
# Mediante expresión regular selecciono las columnas que tienen el número de votos
columnas_Votos<-grep("V_",colnames(datos_MIR))
# Me quedo solo con las columna de votos
datos_MIR_Votos<-as.data.frame(datos_MIR[,columnas_Votos])
# Transformo los datos a numéricos
datos_MIR_Votos <- as.data.frame(apply(datos_MIR_Votos,2,as.integer))
#calculo los totales
totales<-colSums(datos_MIR_Votos)
#Tantos por uno
totales_por<-totales/sum(totales)
#Calculo para cada provincia los escaños que tiene
# Mediante expresión regular selecciono las columnas que tienen el número de escanos
columnas_escanos<-grep("D_",colnames(datos_MIR))
#extraigo las columnas con datos de escaños
datos_MIR_escanos <- as.data.frame(datos_MIR[,columnas_escanos])
#transformo los datos a numericos
datos_MIR_escanos <- as.data.frame(apply(datos_MIR_escanos,2,as.integer))
#Ahora saco los escaños que tiene cada provncia
escanos_prov<-rowSums(datos_MIR_escanos)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
presentado<-datos_MIR_Votos>0
# Calculo lo escaños de la provincias donde se presentan
n<-ncol(datos_MIR_escanos)
esca_presentado<-rep(NA,n)
for(i in 1:n){
esca_presentado[i]<-sum(presentado[,i]*escanos_prov)
}
esca_presentado<-esca_presentado/n_escanos
re<-list()
re[[1]]<-sum(esca_presentado*totales_por)
re[[2]]<-as.numeric(totales_por)
re[[3]]<-as.numeric(esca_presentado)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
#re$Porcentaje_votos
#re$Porcentaje_escanos
return(re)
}#Fin del TRUE
else{
if(missing(d_votos)) stop("Debe facilitarse un data.frame con los datos de votos")
if(missing(d_escanos)) stop("Debe facilitarse un data.frame con los datos de esca\u00F1s")
if(class(d_votos) != "data.frame") stop("El par\u00E1metro 'd_votos' debe ser un data.frame")
if(class(d_escanos) != "data.frame") stop("El par\u00E1metro 'd_escanos' debe ser un data.frame")
# compruebo que el numero de filas es el mismo
if(nrow(d_votos) != nrow(d_escanos)) stop("Deben coincider el n\u00FA de filas de los
dos data.frame")
#Comparo que los nombres de las regiones son los mismo
b <- as.character(d_votos[,1]) == as.character(d_escanos[,1])
if(sum(b) != nrow(d_votos)) stop("Los nombres de las regiones ('primera columa') deben
ser iguales en los dos data.frame")
#Calculo los totales de los votos
totales <- colSums(d_votos[,-c(1)])
#Tantos por uno a nivel nacional
totales_por <- totales/sum(totales)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
browser()
presentado<-d_votos[,-c(1)]>0
# Entresaco los escaños de cada provincia
# Me quedo solo con la columna de los escaños
escanos_prov <- d_escanos[,2]
n <- ncol(d_votos[,-c(1)])
esca_presentado <- rep(NA,n)
for(i in 1:n){
esca_presentado[i] <- sum(presentado[,i]*escanos_prov)
}
#Calculo el total de escaños
n_escanos <- sum(escanos_prov)
esca_presentado_por <- esca_presentado/n_escanos
# Los datos los saco en la siguiente lista
re <-list()
re[[1]] <- sum(esca_presentado_por*totales_por)
re[[2]] <- as.numeric(totales_por)
re[[3]] <- as.numeric(esca_presentado_por)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
return(re)
}#Fin del else
}
IN_LAGO_MONTERO(Auto = FALSE,d_votos = da1,d_escanos = da2)
totales
totales_por
presentado
escanos_prov
esca_presentado[1]
esca_presentado
escanos_prov
View(d_escanos)
View(d_escanos)
View(d_escanos)
View(d_escanos)
View(d_votos)
IN_LAGO_MONTERO(Auto = FALSE,d_votos = da1,d_escanos = da2)
totales
presentado
esca_presentado
esca_presentado[1]
esca_presentado[2]
esca_presentado_por
elec<-read.table("F:\\Elecciones\\TFM\\TodasleccionesMir.txt",header=T,sep = ",",
colClasses = c("character","integer"))
if (!require("Relectoral")) install.packages("Relectoral"); require("Relectoral")
elec<-read.table("F:\\Elecciones\\TFM\\TodasleccionesMir.txt",header=T,sep = ",",
colClasses = c("character","integer"))
datos<-data.frame(ano=rep(NA,nrow(elec)),
ind=rep(NA,nrow(elec)))
for(i in 1:nrow(elec)){
print(paste("Ejecutando ",i))
datos[i,1]<-elec[i,2]
tryCatch(
{datos[i,2]<-IN_LAGO_MONTERO(elec[i,2],elec[i,1],"D:/")$V_indice}
)
Sys.sleep(2)
}
if (!require("ggplot2")) install.packages("ggplot2"); require("ggplot2")
p<-ggplot(data = datos,aes(x=ano,y=ind))+geom_line()
p+ggtitle("Evolución del Índice de Nacionalización de Lago y Montero")+
xlab("Años Electorales")+ylab("Valor del índice")
IN_LAGO_MONTERO<-function(Ano,Mes,Ruta,n_escanos=350,Auto=TRUE,d_votos,d_escanos){
if(Auto == TRUE){
if( class(Mes) != "character") stop( " El mes debe ser de tipo car\u00E1cter")
if(nchar(Mes) != 2) stop("El mes debe contener dos caracteres")
if(is.null(Ruta)) stop("Se debe facilitar alg\u00FAn valor para 'Ruta'")
# Indice de nacionalización de Lago y Montero
datos_MIR<-suppressMessages(Agregado_Prov_MIR(Ano,Mes,"Congreso",Ruta,Borrar=T))
datos_MIR<-datos_MIR[1:52,]
#Me quedo con la columna de los votos
# Mediante expresión regular selecciono las columnas que tienen el número de votos
columnas_Votos<-grep("V_",colnames(datos_MIR))
# Me quedo solo con las columna de votos
datos_MIR_Votos<-as.data.frame(datos_MIR[,columnas_Votos])
# Transformo los datos a numéricos
datos_MIR_Votos <- as.data.frame(apply(datos_MIR_Votos,2,as.integer))
#calculo los totales
totales<-colSums(datos_MIR_Votos)
#Tantos por uno
totales_por<-totales/sum(totales)
#Calculo para cada provincia los escaños que tiene
# Mediante expresión regular selecciono las columnas que tienen el número de escanos
columnas_escanos<-grep("D_",colnames(datos_MIR))
#extraigo las columnas con datos de escaños
datos_MIR_escanos <- as.data.frame(datos_MIR[,columnas_escanos])
#transformo los datos a numericos
datos_MIR_escanos <- as.data.frame(apply(datos_MIR_escanos,2,as.integer))
#Ahora saco los escaños que tiene cada provncia
escanos_prov<-rowSums(datos_MIR_escanos)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
presentado<-datos_MIR_Votos>0
# Calculo lo escaños de la provincias donde se presentan
n<-ncol(datos_MIR_escanos)
esca_presentado<-rep(NA,n)
for(i in 1:n){
esca_presentado[i]<-sum(presentado[,i]*escanos_prov)
}
esca_presentado<-esca_presentado/n_escanos
re<-list()
re[[1]]<-sum(esca_presentado*totales_por)
re[[2]]<-as.numeric(totales_por)
re[[3]]<-as.numeric(esca_presentado)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
#re$Porcentaje_votos
#re$Porcentaje_escanos
return(re)
}#Fin del TRUE
else{
if(missing(d_votos)) stop("Debe facilitarse un data.frame con los datos de votos")
if(missing(d_escanos)) stop("Debe facilitarse un data.frame con los datos de esca\u00F1s")
if(class(d_votos) != "data.frame") stop("El par\u00E1metro 'd_votos' debe ser un data.frame")
if(class(d_escanos) != "data.frame") stop("El par\u00E1metro 'd_escanos' debe ser un data.frame")
# compruebo que el numero de filas es el mismo
if(nrow(d_votos) != nrow(d_escanos)) stop("Deben coincider el n\u00FA de filas de los
dos data.frame")
#Comparo que los nombres de las regiones son los mismo
b <- as.character(d_votos[,1]) == as.character(d_escanos[,1])
if(sum(b) != nrow(d_votos)) stop("Los nombres de las regiones ('primera columa') deben
ser iguales en los dos data.frame")
#Calculo los totales de los votos
totales <- colSums(d_votos[,-c(1)])
#Tantos por uno a nivel nacional
totales_por <- totales/sum(totales)
#Detectamos en que provincia se han presentado los partidos mediante
# el número de votos, si es cero no se presentan y en caso contrario si
# Se hace mediante na matriz de valores lógicos
browser()
presentado<-d_votos[,-c(1)]>0
# Entresaco los escaños de cada provincia
# Me quedo solo con la columna de los escaños
escanos_prov <- d_escanos[,2]
n <- ncol(d_votos[,-c(1)])
esca_presentado <- rep(NA,n)
for(i in 1:n){
esca_presentado[i] <- sum(presentado[,i]*escanos_prov)
}
#Calculo el total de escaños
n_escanos <- sum(escanos_prov)
esca_presentado_por <- esca_presentado/n_escanos
# Los datos los saco en la siguiente lista
re <-list()
re[[1]] <- sum(esca_presentado_por*totales_por)
re[[2]] <- as.numeric(totales_por)
re[[3]] <- as.numeric(esca_presentado_por)
names(re)<-c("V_indice","Porcentaje_votos","Porcentaje_escanos")
return(re)
}#Fin del else
}
s<-IN_LAGO_MONTERO(2019,"11","D:/",n_escanos = 350)
library(Relectoral)
if (!require("Relectoral")) install.packages("Relectoral"); require("Relectoral")
elec<-read.table("F:\\Elecciones\\TFM\\TodasleccionesMir.txt",header=T,sep = ",",
colClasses = c("character","integer"))
datos<-data.frame(ano=rep(NA,nrow(elec)),
ind=rep(NA,nrow(elec)))
for(i in 1:nrow(elec)){
print(paste("Ejecutando ",i))
datos[i,1]<-elec[i,2]
tryCatch(
{datos[i,2]<-IN_LAGO_MONTERO(elec[i,2],elec[i,1],"D:/")$V_indice}
)
Sys.sleep(2)
}
library(Relectoral)
library("devtools", lib.loc="D:/programas/R/R-3.6.1/library")
build()
?check()
check(manual = TRUE,path='F:/Elecciones/TFM'
check(manual = TRUE,path='F:/Elecciones/TFM')
check(manual = TRUE)
